plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version "7.0.+"
}

version = "${mod_version}"
group = "net.commoble.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
base {
	archivesName = "${modid}-${mc_version}"
}

archivesBaseName = "${modid}-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets
{
	main
	examplemod { runs { modIdentifier "infiniverse_examplemod" }}
	test
}

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
	configureEach {
		systemProperty 'forge.logging.console.level', 'debug'
		modSources.addAll project.sourceSets.main, project.sourceSets.examplemod
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}
	
	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}

	data {
		programArguments.addAll '--mod', project.modid, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	examplemodCompileClasspath.extendsFrom(compileClasspath)
	examplemodRuntimeClasspath.extendsFrom(runtimeClasspath)
}

repositories {
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
	examplemodImplementation sourceSets.main.output
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
			"Specification-Title": "${modid}",
			"Specification-Vendor": "Commoble",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"Commoble",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	archiveClassifier = "sources"
	from sourceSets.main.allJava
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

// run "gradlew build publish" to build jars and generate a maven repo for them
// run "gradlew build" to build the jars without mavening them
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
			artifact jar
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name="localMaven"
			url "file:///${project.projectDir}/maven"
		}
	}
}
